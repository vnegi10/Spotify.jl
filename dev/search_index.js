var documenterSearchIndex = {"docs":
[{"location":"endpoints.html#Endpoints","page":"Endpoints","title":"Endpoints","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Here we list out all the endpoints for given portions of the API","category":"page"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"warning: Permissions\nCertain endpoints require special permissions that would need elevated authentication methods","category":"page"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Pages = [\"endpoints.md\"]","category":"page"},{"location":"endpoints.html#Albums","page":"Endpoints","title":"Albums","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Album endpoints are somewhat limited but can be combined with other calls to become very powerful","category":"page"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"album\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.album_get_contains-Tuple{Any}","page":"Endpoints","title":"Spotify.album_get_contains","text":"album_get_contains(ids)\n\nSummary: Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.\n\nArguments\n\nids : A comma-separated list of the Spotify album IDs\n\nExample\n\njulia> Spotify.album_get_contains(\"382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo\")[1]\n[ Info: We try the request without checking if current grant includes scope user-library-read.\n2-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n 0\n 0\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.album_get_multiple-Tuple{Any}","page":"Endpoints","title":"Spotify.album_get_multiple","text":"album_get_multiple(album_ids; market=\"US\")\n\nSummary: Get Spotify catalog information for multiple albums identified by their Spotify IDs.    \n\nArguments\n\nalbum_ids : A comma-separated list of the Spotify IDs for the albums. Maximum: 20 IDs.\n\nOptional keywords\n\nmarket : An ISO 3166-1 alpha-2 country code. Default is set to \"US\".\n\nExample\n\njulia> Spotify.album_get_multiple(\"5XgEM5g3xWEwL4Zr6UjoLo, 2rpT0freJsmUmmPluVWqg5\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :albums => JSON3.Object[{…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.album_get_saved-Tuple{}","page":"Endpoints","title":"Spotify.album_get_saved","text":"album_get_saved(;limit::Int64=20, market::String=\"US\", offset::Int64=0)\n\nSummary: Get a list of the albums saved in the current Spotify user's 'Your Music' library.\n\nOptional keywords\n\nlimit::Int64 : Maximum number of items to return, default is set to 20\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                     only episodes that are available in that market will be returned.                     Default is set to \"US\".\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.album_get_saved()[1]\n[ Info: We try the request without checking if current grant includes scope user-library-read.\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/me/albums?offset=0&limit=20&market=US\"\n  :items    => JSON3.Object[{…\n  :limit    => 20\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.album_get_single-Tuple{Any}","page":"Endpoints","title":"Spotify.album_get_single","text":"album_get_single(album_id; market=\"US\")\n\nSummary: Get Spotify catalog information for a single album.\n\nArguments\n\nalbum_id : The Spotify ID for the album.\n\nOptional keywords\n\nmarket : An ISO 3166-1 alpha-2 country code. Default is set to \"US\".\n\nExample\n\njulia> Spotify.album_get_single(\"5XgEM5g3xWEwL4Zr6UjoLo\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 18 entries:\n  :album_type             => \"album\"\n  :artists                => JSON3.Object[{…\n  :copyrights             => JSON3.Object[{…\n  :external_ids           => {…\n  :external_urls          => {…\n  :genres                 => Union{}[]\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.album_get_tracks-Tuple{Any}","page":"Endpoints","title":"Spotify.album_get_tracks","text":"album_get_tracks(album_id; limit=20, offset=0, market=\"US\")\n\nSummary: Get Spotify catalog information about an album's tracks. Optional parameters               can be used to limit the number of tracks returned.\n\nArguments\n\nalbum_id : The Spotify ID for the album\n\nOptional keywords\n\nlimit : The maximum number of tracks to return. Default is set to 20.\noffset : The index of the first track to return. Default is 0.\nmarket : An ISO 3166-1 alpha-2 country code. Default is set to \"US\".\n\nExample\n\njulia> Spotify.album_get_tracks(\"5XgEM5g3xWEwL4Zr6UjoLo\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/albums/5XgEM5g3xWEwL4Zr6UjoLo/tracks?offset=0&limit=20&market=US\"\n  :items    => JSON3.Object[{…\n  :limit    => 20\n  :next     => \"https://api.spotify.com/v1/albums/5XgEM5g3xWEwL4Zr6UjoLo/tracks?offset=20&limit=20&market=US\"\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.artist_get_albums-Tuple{Any}","page":"Endpoints","title":"Spotify.artist_get_albums","text":"artist_get_albums(artist_id; include_groups=\"None\", country=\"US\", limit=20, offset=0)\n\nSummary: Get Spotify catalog information about an artist's albums.\n\nArguments\n\nartist_id : The Spotify ID of the artist\n\nOptional keywords\n\ninclude_groups : A comma-separated list of keywords that will be used to filter the response.                     If not supplied, all album types will be returned.                    Valid values are:                    * album                    * single                    * compilation                    * appears_on\ncountry : An ISO 3166-1 alpha-2 country code string. Use this to limit the response to one particular              geographical market. Default is set to \"US\".\nlimit : The maximum number of tracks to return. Default is set to 20.\noffset : The index of the first track to return. Default is 0.\n\nExample\n\njulia> Spotify.artist_get_albums(\"0YC192cP3KPCRWx8zr8MfZ\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 10 entries:\n  :external_urls => {…\n  :followers     => {…\n  :genres        => [\"german soundtrack\", \"soundtrack\"]\n  :href          => \"https://api.spotify.com/v1/artists/0YC192cP3KPCRWx8zr8MfZ\"\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_remove_albums-Tuple{Any}","page":"Endpoints","title":"Spotify.library_remove_albums","text":"Remove Albums for Current User\n\nSummary: Remove one or more albums for the current user's 'Your Music' library.\n\nalbum_ids Required: A comma-separated list of the Spotify IDs. Maximum 50.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_save_album-Tuple{Any}","page":"Endpoints","title":"Spotify.library_save_album","text":"Save Albums for Current User\n\n** Summary**: Save one or more albums to the current user's 'Your Music' library.\n\nalbum_ids Required: A comma-separated list of Spotify IDs. Maximum 50. \n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Artist","page":"Endpoints","title":"Artist","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"artist\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.artist_get-Tuple{Any}","page":"Endpoints","title":"Spotify.artist_get","text":"artist_get(artist_id)\n\nSummary: Get Spotify catalog information for a single artist identified by their unique Spotify ID. \n\nArguments\n\nartist_id : The Spotify artist ID.\n\nExample\n\njulia> Spotify.artist_get(\"0YC192cP3KPCRWx8zr8MfZ\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 10 entries:\n  :external_urls => {…\n  :followers     => {…\n  :genres        => [\"german soundtrack\", \"soundtrack\"]\n  :href          => \"https://api.spotify.com/v1/artists/0YC192cP3KPCRWx8zr8MfZ\"\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.artist_get_related_artists-Tuple{Any}","page":"Endpoints","title":"Spotify.artist_get_related_artists","text":"artist_get_related_artists(artist_id)\n\nSummary: Get spotify catalog information about artists similar to a given artist.               Similarity is based on analysis of the Spotify community's listening history.\n\nArguments\n\nartist_id : The Spotify ID of the artist\n\nExample\n\njulia> Spotify.artist_get_related_artists(\"0YC192cP3KPCRWx8zr8MfZ\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :artists => JSON3.Object[{…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.artist_top_tracks-Tuple{Any}","page":"Endpoints","title":"Spotify.artist_top_tracks","text":"artist_top_tracks(artist_id; country=\"US\")\n\nSummary: Get Spotify catalog information about an artist's top tracks by country.\n\nArguments\n\nartist_id : The Spotify ID of the artist\n\nOptional keywords\n\ncountry : An ISO 3166-1 alpha-2 country code string. Use this to limit the response to one particular              geographical market. Default is set to \"US\".\n\nExample\n\njulia> Spotify.artist_top_tracks(\"0YC192cP3KPCRWx8zr8MfZ\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :tracks => JSON3.Object[{…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.follow_artists","page":"Endpoints","title":"Spotify.follow_artists","text":"follow_artists(item_type::String=\"artist\", limit::Int64=20)\n\nSummary: Get the current user's followed artists.\n\nArguments\n\nitem_type::String Required: The ID type. Currently only artist is supported. Default artist.\nlimit::Int64 Optional: The maximum number of items to return. Default 20, Minimum 1, Maximum 50. \n\nExample\n\njulia> Spotify.follow_artists()[1][\"artists\"]\n[ Info: We try the request without checking if current grant includes scope user-follow-modify.\nJSON3.Object{Base.CodeUnits{UInt8, String}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 6 entries:\n  :items   => JSON3.Object[{…\n  :next    => nothing\n  :total   => 2\n  :cursors => {…\n  :limit   => 20\n  :href    => \"https://api.spotify.com/v1/me/following?type=artist&limit=20\"\n\n\n\n\n\n","category":"function"},{"location":"endpoints.html#Spotify.follow_artists_users-Tuple{Any, Any}","page":"Endpoints","title":"Spotify.follow_artists_users","text":"Follow Artists or Users\n\nSummary: Add the current user as a follower of one or more artists or other Spotify users.\n\ntype Required: The ID type: either artist or user. \n\nids Required: A comma-separated list of the artists or users Spotify IDs. Maximum 50.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.top_artists-Tuple{}","page":"Endpoints","title":"Spotify.top_artists","text":"top_artists(;offset=0, limit=20, time_range=\"medium_term\")\n\nSummary: Get the current user's top artists based on calculated affinity.\n\nOptional keywords\n\noffset Optional: The index of the first tracks to return. Default 0.\n\nlimit Optional: The number of tracks to return. Default 20. \ntime_range Optional: Over what time frame the affinities are computed.                           Valid Options:                           * long_term : Calculated from several years of data including all new data as it becomes available                           * medium_term : Approx. last 6 months                            * short_term : Approx. last 4 weeks\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.unfollow_artists_users-Tuple{Any, Any}","page":"Endpoints","title":"Spotify.unfollow_artists_users","text":"Unfollow Artists or Users\n\nSummary: Remove the current user as a follower of one or more artists or other Spotify users.\n\ntype Required: The ID type: either artist or user. \n\nids Required: A comma-separated list of the artists or users Spotify IDs. Maximum 50.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Browse","page":"Endpoints","title":"Browse","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"category\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.category_get_multiple-Tuple{}","page":"Endpoints","title":"Spotify.category_get_multiple","text":"category_get_multiple(;country::String=\"US\", locale::String=\"en\", limit::Int64=20, offset::Int64=0)\n\nSummary: Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\n\nOptional keywords\n\ncountry::String : An ISO 3166-1 alpha-2 country code. Provide this parameter if you want                      the list of returned items to be relevant to a particular country.                     Default is set to \"US\".\nlocale::String : The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase \n\nISO 3166-1 alpha-2 country code, joined by an underscore. For example: esMX, meaning \"Spanish (Mexico)\".  Provide this parameter if you want the results returned in a particular language (where available). Default is set to \"enUS\".\n\nlimit::Int64 : Maximum number of items to return, default is set to 20\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.category_get_multiple()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :categories => {…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.category_get_new_releases-Tuple{}","page":"Endpoints","title":"Spotify.category_get_new_releases","text":"category_get_new_releases(;country::String=\"US\", locale::String=\"en\", limit::Int64=20, offset::Int64=0)\n\nSummary: Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).\n\nOptional keywords\n\ncountry::String : An ISO 3166-1 alpha-2 country code. Provide this parameter if you want                      the list of returned items to be relevant to a particular country.                     Default is set to \"US\".\nlocale::String : The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase \n\nISO 3166-1 alpha-2 country code, joined by an underscore. For example: esMX, meaning \"Spanish (Mexico)\".  Provide this parameter if you want the results returned in a particular language (where available). Default is set to \"enUS\".\n\nlimit::Int64 : Maximum number of items to return, default is set to 20\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.category_get_new_releases()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :albums => {…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.category_get_single-Tuple{Any}","page":"Endpoints","title":"Spotify.category_get_single","text":"category_get_single(category_id; country::String=\"US\", locale::String=\"en\")\n\nSummary: Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\n\nArguments\n\ncategory_id : The Spotify category ID for the category.\n\nOptional keywords\n\ncountry::String : An ISO 3166-1 alpha-2 country code. Provide this parameter if you want                      the list of returned items to be relevant to a particular country.                     Default is set to \"US\".\nlocale::String : The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase \n\nISO 3166-1 alpha-2 country code, joined by an underscore. For example: esMX, meaning \"Spanish (Mexico)\".  Provide this parameter if you want the results returned in a particular language (where available). Default is set to \"enUS\".\n\nExample\n\njulia> Spotify.category_get_single(\"party\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 4 entries:\n  :href  => \"https://api.spotify.com/v1/browse/categories/party\"\n  :icons => JSON3.Object[{…\n  :id    => \"party\"\n  :name  => \"Party\"\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_get_category-Tuple{Any}","page":"Endpoints","title":"Spotify.playlist_get_category","text":"playlist_get_category(category_id::String; country::String=\"US\", limit::Int64=20, offset::Int64=0)\n\nSummary: Get a list of Spotify playlists tagged with a particular category.\n\nArguments\n\ncategory_id::String : The unique string identifying the Spotify category, e.g. \"dinner\", \"party\" etc.\n\nOptional keywords\n\ncountry::String : An ISO 3166-1 alpha-2 country code. Provide this parameter if you want                      the list of returned items to be relevant to a particular country.                     Default is set to \"US\".\nlimit::Int64 : Maximum number of items to return, default is set to 20\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.playlist_get_category(\"party\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :playlists => {…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Episodes","page":"Endpoints","title":"Episodes","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"episodes\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.episodes_get_contains-Tuple{Any}","page":"Endpoints","title":"Spotify.episodes_get_contains","text":"episodes_get_contains(ids)\n\nSummary: Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes' library.              This API endpoint is in beta and could change without warning.\n\nArguments\n\nids : A comma-separated list of the Spotify episode IDs\n\nExample\n\njulia> Spotify.episodes_get_contains(\"77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf\")[1]\n[ Info: We try the request without checking if current grant includes scope user-library-read.\n2-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n 0\n 0\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.episodes_get_multiple-Tuple{Any}","page":"Endpoints","title":"Spotify.episodes_get_multiple","text":"episodes_get_multiple(episode_ids; market=\"US\")\n\nSummary: Get Spotify catalog information for several episodes based on their Spotify IDs.\n\nArguments\n\nepisode_ids : A comma-separated list of the Spotify IDs for the episodes. Maximum: 50 IDs.\n\nOptional keywords\n\nmarket : An ISO 3166-1 alpha-2 country code. Default is set to \"US\".\n\nExample\n\njulia> Spotify.episodes_get_multiple(\"77o6BIVlYM3msb4MMIL1jH,0Q86acNRm6V9GYx55SXKwf\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :episodes => JSON3.Object[{…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.episodes_get_saved-Tuple{}","page":"Endpoints","title":"Spotify.episodes_get_saved","text":"episodes_get_saved(;limit::Int64=20, market::String=\"US\", offset::Int64=0)\n\nSummary: Get a list of the episodes saved in the current Spotify user's library.              This API endpoint is in beta and could change without warning.\n\nOptional keywords\n\nlimit::Int64 : Maximum number of items to return, default is set to 20\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                     only episodes that are available in that market will be returned.                     Default is set to \"US\".\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\n```julia-repl julia> Spotify.episodesgetsaved()[1] [ Info: We try the request without checking if current grant includes scope user-library-read. JSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:   :href     => \"https://api.spotify.com/v1/me/episodes?offset=0&limit=20&market=US\"   :items    => Union{}[]   :limit    => 20\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.episodes_get_single-Tuple{Any}","page":"Endpoints","title":"Spotify.episodes_get_single","text":"episodes_get_single(episode_id; market=\"US\")\n\nSummary: Get Spotify catalog information for a single episode identified by its unique Spotify ID.\n\nArguments\n\nepisode_id : The Spotify ID for the episode_id\n\nOptional keywords\n\nmarket : An ISO 3166-1 alpha-2 country code. Default is set to \"US\".\n\nExample\n\njulia> Spotify.episodes_get_single(\"512ojhOuo1ktJprKbVcKyQ\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 19 entries:\n  :audio_preview_url    => \"https://p.scdn.co/mp3-preview/566fcc94708f39bcddc09e4ce84a8e5db8f07d4d\"\n  :description          => \"En ny tysk bok granskar för första gången Tredje rikets drogberoende, från Führerns k…\n  :duration_ms          => 1502795\n  :explicit             => false\n  :external_urls        => {…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.show_get_episodes-Tuple{Any}","page":"Endpoints","title":"Spotify.show_get_episodes","text":"show_get_episodes(show_id; market=\"US\", limit=20, offset=0)\n\nSummary: Get Spotify catalog information about a show’s episodes. Optional parameters               can be used to limit the number of episodes returned.\n\nArguments\n\nshow_id : The Spotify ID for the show\n\nOptional keywords\n\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                     only episodes that are available in that market will be returned.                     Default is set to \"US\".\nlimit::Int64 : Maximum number of items to return, default is set to 20. (0 < limit <= 50)\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.show_get_episodes(\"2MAi0BvDc6GTFvKFPXnkCL\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/shows/2MAi0BvDc6GTFvKFPXnkCL/episodes?offset=0&limit=20&market=US\"\n  :items    => JSON3.Object[{…\n  :limit    => 20\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Follow","page":"Endpoints","title":"Follow","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"follow\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.follow_check-Tuple{String, String}","page":"Endpoints","title":"Spotify.follow_check","text":"follow_check(item_type, ids)\n\nSummary: Check to see if the current user is following one or more artists or other Spotify users.\n\nArguments\n\nitem_type::String Required: The ID type, either artist or user.\n\nids::String Required: A comma separated list of the artist or user Spotify IDs to check. Maximum 50.\n\nExample\n\njulia> Spotify.follow_check(\"artist\", \"7fxBPUc2bTUgl7GLuqjajk\")[1]\n[ Info: We try the request without checking if current grant includes scope user-follow-read.\n1-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n 1\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.follow_check_playlist-Tuple{Any, Any}","page":"Endpoints","title":"Spotify.follow_check_playlist","text":"follow_check_playlist(playlist_id::String, user_id::String)\n\nSummary: Check to see if one or more Spotify users are following a specified playlist_id.\n\nArguments\n\nplaylist_id::String Required: The Spotify ID of the playlist.\n\nuser_id::String Required: A comma separated list of the user Spotify IDS to check. Maximum 5.\n\nExample\n\njulia> Spotify.follow_check_playlist(\"37i9dQZF1DZ06evO3Khq6I\", user_id)[1]\n1-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n 0\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.follow_playlist-Tuple{Any}","page":"Endpoints","title":"Spotify.follow_playlist","text":"Follow a Playlist\n\nSummary: Add the currend user as a follower of a playlist. \n\nplaylist_id Required: The Spotify ID of the playlist. Any playlist can be followed regardless of it's private/public status, as long as the ID is known.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.unfollow_playlist-Tuple{Any}","page":"Endpoints","title":"Spotify.unfollow_playlist","text":"Unfollow a Playlist\n\nSummary: Remove the current user as a follower of a playlist.\n\nplaylist_id Required: The Spotify ID of the playlist. Any playlist can be followed regardless of it's private/public status, as long as the ID is known.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Genres","page":"Endpoints","title":"Genres","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"genres\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.genres_get-Tuple{}","page":"Endpoints","title":"Spotify.genres_get","text":"genres_get()\n\nSummary: Retrieve a list of available genres seed parameter values for recommendations.\n\nExample\n\njulia> Spotify.genres_get()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :genres => [\"acoustic\", \"afrobeat\", \"alt-rock\", \"alternative\", \"ambient\", \"anime\", \"black-metal\",…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Library","page":"Endpoints","title":"Library","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Endpoints referenced here are included in the library section. These functions act on whoever has authorized their account to be queried. They can answer questions like","category":"page"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"library\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.library_remove_shows-Tuple{Any}","page":"Endpoints","title":"Spotify.library_remove_shows","text":"Remove Shows for Current User\n\nSummary: Remove one or more shows for the current user's library.\n\nshow_ids Required: A comma-separated list of the Spotify IDs. Maximum 50.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_remove_tracks-Tuple{Any}","page":"Endpoints","title":"Spotify.library_remove_tracks","text":"Remove Tracks for Current User\n\nSummary: Remove one or more tracks for the current user's 'Your Music' library.\n\ntrack_ids Required: A comma-separated list of the Spotify IDs. Maximum 50.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_save_show-Tuple{Any}","page":"Endpoints","title":"Spotify.library_save_show","text":"Save Shows for Current User\n\n** Summary**: Save one or more shows to the current user's library.\n\nshows_ids Required: A comma-separated list of Spotify IDs. Maximum 50. \n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_save_track-Tuple{Any}","page":"Endpoints","title":"Spotify.library_save_track","text":"Save Tracks for Current User\n\n** Summary**: Save one or more tracks to the current user's 'Your Music' library.\n\ntrack_ids Required: A comma-separated list of Spotify IDs. Maximum 50. \n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Markets","page":"Endpoints","title":"Markets","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"markets\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.markets_get-Tuple{}","page":"Endpoints","title":"Spotify.markets_get","text":"markets_get()\n\nSummary: Get the list of markets where Spotify is available.\n\nExample\n\njulia> Spotify.markets_get()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :markets => [\"AD\", \"AE\", \"AG\", \"AL\", \"AM\", \"AO\", \"AR\", \"AT\", \"AU\", \"AZ\"  …\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Personalization","page":"Endpoints","title":"Personalization","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"top\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.top_tracks-Tuple{}","page":"Endpoints","title":"Spotify.top_tracks","text":"top_tracks(;offset=0, limit=20, time_range=\"medium_term\")\n\nSummary: Get the current user's top tracks based on calculated affinity.\n\nOptional keywords\n\noffset Optional: The index of the first tracks to return. Default 0.\n\nlimit Optional: The number of tracks to return. Default 20. \ntime_range Optional: Over what time frame the affinities are computed.                           Valid Options:                           * long_term : Calculated from several years of data including all new data as it becomes available                           * medium_term : Approx. last 6 months                            * short_term : Approx. last 4 weeks\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Playlists","page":"Endpoints","title":"Playlists","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"playlist\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.playlist_get-Tuple{Any}","page":"Endpoints","title":"Spotify.playlist_get","text":"playlist_get(playlist_id::String; additional_types::String=\"track\", fields::String=\"\",\nmarket::String=\"US\")\n\nSummary: Get details about a playlist owned by a Spotify user.\n\nArguments\n\nplaylist_id::String : Alphanumeric ID of the playlist\n\nOptional keywords\n\nadditional_types::String : \"track\" (default) or \"episode\"\nfields::String : Filters for the query, a comma-separated list of the fields to return.                    For example, to get just the added date and user ID of the adder,                     fields = \"items(addedat,addedby.id)\". Default is set to \"\", which means                    all fields are returned.\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                     only episodes that are available in that market will be returned.                     Default is set to \"US\".\n\nExample\n\njulia> Spotify.playlist_get(\"37i9dQZF1E4vUblDJbCkV3\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 15 entries:\n  :collaborative => false\n  :description   => \"With Roo Panes, Hiss Golden Messenger, Nathaniel Rateliff and more\"\n  :external_urls => {…\n  :followers     => {…\n  :href          => \"https://api.spotify.com/v1/playlists/37i9dQZF1E4vUblDJbCkV3?additional_types=track\"\n  :id            => \"37i9dQZF1E4vUblDJbCkV3\"\n  :images        => JSON3.Object[{…\n  :name          => \"Lord Huron Radio\"\n  :owner         => {…\n  :primary_color => nothing\n  :public        => false\n  :snapshot_id   => \"MTYzNTg2NzMxNCwwMDAwMDAwMGU3MTgwNDkzOWE5NTQ2NGM1NmYzNTYyZDhhZTc1ZGNh\"\n  :tracks        => {…\n  :type          => \"playlist\"\n  :uri           => \"spotify:playlist:37i9dQZF1E4vUblDJbCkV3\"\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_get_cover_image-Tuple{Any}","page":"Endpoints","title":"Spotify.playlist_get_cover_image","text":"playlist_get_cover_image(playlist_id::String)\n\nSummary: Get the current image associated with a specific playlist.\n\nArguments\n\nplaylist_id::String : Alphanumeric ID of the playlist\n\nExample\n\njulia> Spotify.playlist_get_cover_image(\"37i9dQZF1E4vUblDJbCkV3\")[1]\n1-element JSON3.Array{JSON3.Object, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n {\n   \"height\": nothing,\n      \"url\": \"https://seeded-session-images.scdn.co/v1/img/artist/6ltzsmQQbmdoHHbLZ4ZN25/en\",\n    \"width\": nothing\n}\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_get_current_user-Tuple{}","page":"Endpoints","title":"Spotify.playlist_get_current_user","text":"playlist_get_current_user(limit::Int64=20, offset::Int64=0)\n\nSummary: Get a list of the playlists owned or followed by the current Spotify user.\n\nOptional keywords\n\nlimit::Int64 : Maximum number of items to return, default is set to 20\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.playlist_get_current_user()[1]\n[ Info: We try the request without checking if current grant includes scope playlist-read-private.\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/users/your_user_id/playlists?offset=0&limit=20\"\n  :items    => JSON3.Object[{…\n  :limit    => 20\n  :next     => nothing\n  :offset   => 0\n  :previous => nothing\n  :total    => 2\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_get_featured-Tuple{}","page":"Endpoints","title":"Spotify.playlist_get_featured","text":"playlist_get_featured(;country::String=\"US\", limit::Int64=20, locale::String=\"en_US\", \n                           offset::Int64=0, timestamp::String=\"2021-11-21T19:41:58.753\")\n\nSummary: Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).\n\nOptional keywords\n\ncountry::String : An ISO 3166-1 alpha-2 country code. Provide this parameter if you want                      the list of returned items to be relevant to a particular country.                     Default is set to \"US\".\nlimit::Int64 : Maximum number of items to return, default is set to 20\nlocale::String : The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase                     ISO 3166-1 alpha-2 country code, joined by an underscore. For example: esMX, meaning \"Spanish (Mexico)\".                     Provide this parameter if you want the results returned in a particular language (where available).                    Default is set to \"enUS\".\noffset::Int64 : Index of the first item to return, default is set to 0\ntimestamp::String : A timestamp in ISO 8601 format: yyyy-MM-ddTHH:mm:ss. Use this parameter to specify the user's local time                        to get results tailored for that specific date and time in the day.                       Default is set to user's current time.    \n\nExample\n\njulia> Spotify.playlist_get_featured(locale=\"en_UK\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 2 entries:\n  :message   => \"Tuesday jams\"\n  :playlists => {…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_get_tracks-Tuple{Any}","page":"Endpoints","title":"Spotify.playlist_get_tracks","text":"playlist_get_tracks(playlist_id::String; additional_types=\"track\", limit=50, \noffset=0, market=\"US\")\n\nSummary: Get details about the items of a playlist.\n\nArguments\n\nplaylist_id::String : Alphanumeric ID of the playlist\n\nOptional keywords\n\nadditional_types::String : \"track\" (default) or \"episode\"\nfields::String : Filters for the query, a comma-separated list of the fields to return.                    For example, to get just the added date and user ID of the adder,                     fields = \"items(addedat,addedby.id)\". Default is set to \"\", which means                    all fields are returned.\nlimit::Int64 : Maximum number of items to return, default is set to 20\noffset::Int64 : Index of the first item to return, default is set to 0\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                     only episodes that are available in that market will be returned.                     Default is set to \"US\".\n\nExample\n\njulia> Spotify.playlist_get_tracks(\"37i9dQZF1E4vUblDJbCkV3\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/playlists/37i9dQZF1E4vUblDJbCkV3/tracks?offset=0&limit=20&market=US&additional_types=…\n  :items    => JSON3.Object[{…\n  :limit    => 20\n  :next     => \"https://api.spotify.com/v1/playlists/37i9dQZF1E4vUblDJbCkV3/tracks?offset=20&limit=20&market=US&additional_types…\n  :offset   => 0\n  :previous => nothing\n  :total    => 50\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_get_user-Tuple{Any}","page":"Endpoints","title":"Spotify.playlist_get_user","text":"playlist_get_user(user_id::String; limit::Int64=20, offset::Int64=0)\n\nSummary: Get a list of the playlists owned or followed by a Spotify user.\n\nArguments\n\nuser_id::String : Alphanumeric ID of the user or name (e.g. \"smedjan\")\n\nOptional keywords\n\nlimit::Int64 : Maximum number of items to return, default is set to 20\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.playlist_get_user(\"smedjan\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/users/smedjan/playlists?offset=0&limit=20\"\n  :items    => JSON3.Object[{…\n  :limit    => 20\n  :next     => \"https://api.spotify.com/v1/users/smedjan/playlists?offset=20&limit=20\"\n  :offset   => 0\n  :previous => nothing\n  :total    => 98\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Search","page":"Endpoints","title":"Search","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"search\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.search_get-Tuple{}","page":"Endpoints","title":"Spotify.search_get","text":"search_get(;q::String=\"Coldplay\", item_type::String=\"track,artist\", include_external::String=\"\",\n                limit::Int64=20, market::String=\"US\", offset::Int64=0)\n\nSummary: Get Spotify catalog information about albums, artists, playlists, tracks,               shows or episodes that match a keyword string.\n\nOptional keywords\n\nq::String : Search query, e.g. \"Coldplay\" which is also set as the default\nitem_type::String : A comma-separated list of item types to search across. Search results include                   hits from all the specified item types. For example, item_type = \"album,tarck\" returns                   both albums and tracks with the search query included in their name.\ninclude_external::String : If include_external=\"audio\" is specified then the response will include any                               relevant audio content that is hosted externally.\nlimit::Int64 : Maximum number of items to return, default is set to 20\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                        only episodes that are available in that market will be returned.                        Default is set to \"US\".\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.search_get(;q = \"Greenday\", item_type = \"album\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :albums => {…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Shows","page":"Endpoints","title":"Shows","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"show\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.show_get_contains-Tuple{Any}","page":"Endpoints","title":"Spotify.show_get_contains","text":"show_get_contains(ids)\n\nSummary: Check if one or more shows is already saved in the current Spotify user's library.\n\nArguments\n\nids : A comma-separated list of the Spotify IDs for the shows. Maximum: 50 IDs.\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.show_get_multiple-Tuple{Any}","page":"Endpoints","title":"Spotify.show_get_multiple","text":"show_get_multiple(ids; market::String=\"US\")\n\nSummary: Get Spotify catalog information for several shows based on their Spotify IDs. \n\nArguments\n\nids : A comma-separated list of the Spotify IDs for the shows. Maximum: 50 IDs.\n\nOptional keywords\n\nmarket : An ISO 3166-1 alpha-2 country code. If a country code is specified, only shows             and episodes that are available in that market will be returned.\n\nExample\n\njulia> Spotify.show_get_multiple(\"2MAi0BvDc6GTFvKFPXnkCL, 4rOoJ6Egrf8K2IrywzwOMk\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :shows => JSON3.Object[{…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.show_get_saved-Tuple{}","page":"Endpoints","title":"Spotify.show_get_saved","text":"show_get_saved(;limit::Int64=20, offset::Int64=0)\n\nSummary: Get a list of shows saved in the current Spotify user's library. Optional parameters can               be used to limit the number of shows returned. \n\nOptional keywords\n\nlimit::Int64 : Maximum number of items to return, default is set to 20. (0 < limit <= 50)\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.show_get_saved()[1]\n[ Info: We try the request without checking if current grant includes scope user-library-read.\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/me/shows?offset=0&limit=20\"\n  :items    => Union{}[]\n  :limit    => 20\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.show_get_single-Tuple{Any}","page":"Endpoints","title":"Spotify.show_get_single","text":"show_get(show_id; market=\"US\")\n\nSummary: Get a Spotify catalog information for a single show identified by it's unique Spotify ID.\n\nArguments\n\nshow_id : The Spotify ID for the show\n\nOptional keywords\n\nmarket : An ISO 3166-1 alpha-2 country code. If a country code is specified, only shows             and episodes that are available in that market will be returned.\n\nExample\n\njulia> Spotify.show_get_single(\"2MAi0BvDc6GTFvKFPXnkCL\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 18 entries:\n  :available_markets    => [\"AD\", \"AE\", \"AG\", \"AL\", \"AM\", \"AR\", \"AT\", \"AU\", \"BA\", \"BB\"  …  \"TV\", \"TW\", \"US\", \"UY\", \"VC\", …\n  :copyrights           => Union{}[]\n  :description          => \"Conversations about science, technology, history, philosophy and the nature of intelligence, …\n  :episodes             => {…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Tracks","page":"Endpoints","title":"Tracks","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"tracks\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.player_get_recent_tracks-Tuple{}","page":"Endpoints","title":"Spotify.player_get_recent_tracks","text":"player_get_recent_tracks(;duration::Int64=1, limit::Int64=20)\n\nSummary: Get current user's recently played tracks.\n\nOptional keywords\n\nduration::Int64 : Number of days to look in the past, default is set to 1\nlimit::Int64 : Maximum number of items to return, default is set to 20\n\nExample\n\njulia> Spotify.player_get_recent_tracks()[1]\n[ Info: We try the request without checking if current grant includes scope user-read-recently-played.\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 5 entries:\n  :items   => JSON3.Object[{…\n  :next    => \"https://api.spotify.com/v1/me/player/recently-played?after=1636123644988&limit=20\"\n  :cursors => {…\n  :limit   => 20\n  :href    => \"https://api.spotify.com/v1/me/player/recently-played?after=1636410050&limit=20\"\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_get_audio_analysis-Tuple{Any}","page":"Endpoints","title":"Spotify.tracks_get_audio_analysis","text":"tracks_get_audio_analysis(track_id)\n\nSummary: Get a detailed audio analysis for a single track identified by it's unique Spotify ID.\n\nArguments\n\ntrack_id: The Spotify ID for the track\n\nExample\n\njulia> Spotify.tracks_get_audio_analysis(\"6rqhFgbbKwnb9MLmUQDhG6\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :meta     => {…\n  :track    => {…\n  :bars     => JSON3.Object[{…\n  :beats    => JSON3.Object[{…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_get_audio_features-Tuple{Any}","page":"Endpoints","title":"Spotify.tracks_get_audio_features","text":"tracks_get_audio_features(track_id)\n\nSummary: Get audio feature information for a single track identified by it's unique Spotify ID.\n\nArguments\n\ntrack_id: The Spotify ID for the track\n\nExample\n\njulia> Spotify.tracks_get_audio_features(\"6rqhFgbbKwnb9MLmUQDhG6\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 18 entries:\n  :danceability     => 0.592\n  :energy           => 0.0196\n  :key              => 1\n  :loudness         => -33.35\n  :mode             => 1\n  :speechiness      => 0.0358\n  :acousticness     => 0.362\n  :instrumentalness => 0.854\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_get_contains-Tuple{Any}","page":"Endpoints","title":"Spotify.tracks_get_contains","text":"tracks_get_contains(ids)\n\nSummary: Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.\n\nArguments\n\nids : A comma-separated list of the Spotify track IDs.\n\nExample\n\njulia> Spotify.tracks_get_contains(\"4iV5W9uYEdYUVa79Axb7Rh, 4VqPOruhp5EdPBeR92t6lQ\")[1]\n2-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n 0\n 0\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_get_multiple-Tuple{Any}","page":"Endpoints","title":"Spotify.tracks_get_multiple","text":"tracks_get_multiple(ids::String; market::String=\"US\")\n\nSummary: Get Spotify catalog information for multiple tracks based on their Spotify IDs.\n\nArguments\n\nids : A comma-separated list of the Spotify IDs. \n\nOptional keywords\n\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                     only episodes that are available in that market will be returned.                     Default is set to \"US\".\n\nExample\n\njulia> Spotify.tracks_get_multiple(\"4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :tracks => Union{Nothing, JSON3.Object}[{…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_get_saved-Tuple{}","page":"Endpoints","title":"Spotify.tracks_get_saved","text":"tracks_get_saved(;limit::Int64=20, market::String=\"US\", offset::Int64=0)\n\nSummary: Get a list of the songs saved in the current Spotify user's 'Your Music' library.\n\nOptional keywords\n\nlimit::Int64 : Maximum number of items to return, default is set to 20\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                     only episodes that are available in that market will be returned.                     Default is set to \"US\".\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.tracks_get_saved()[1]\n[ Info: We try the request without checking if current grant includes scope user-library-read.\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/me/tracks?offset=0&limit=20&market=US\"\n  :items    => JSON3.Object[{…\n  :limit    => 20\n  :next     => \"https://api.spotify.com/v1/me/tracks?offset=20&limit=20&market=US\"\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_get_single-Tuple{Any}","page":"Endpoints","title":"Spotify.tracks_get_single","text":"tracks_get(track_id; market=\"US\")\n\nSummary: Get a spotify catalog information for a single track identified by it's unique Spotify ID.\n\nArguments\n\ntrack_id : The Spotify ID for the track.\n\nOptional keywords\n\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                     only episodes that are available in that market will be returned.                     Default is set to \"US\".\n\nExample\n\njulia> Spotify.tracks_get(\"6rqhFgbbKwnb9MLmUQDhG6\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 18 entries:\n  :album         => {…\n  :artists       => JSON3.Object[{…\n  :disc_number   => 1\n  :duration_ms   => 65314\n  :explicit      => true\n  :external_ids  => {…\n  :external_urls => {…\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Users","page":"Endpoints","title":"Users","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"user\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.user_get_current_profile-Tuple{}","page":"Endpoints","title":"Spotify.user_get_current_profile","text":"user_get_current_profile()\n\n**Summary**: Get detailed profile information about the current user \n            (including the current user's username).\n\nExample\n\njulia> Spotify.user_get_current_profile()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 12 entries:\n  :country          => \"NL\"\n  :display_name     => \"Itachi\"\n  :email            => \"your_id@gmail.com\"\n  :explicit_content => {…\n  :external_urls    => {…\n  :followers        => {…\n  :href             => \"https://api.spotify.com/v1/users/your_user_id\"\n  :id               => \"your_user_id\"\n  :images           => Union{}[]\n  :product          => \"premium\"\n  :type             => \"user\"\n  :uri              => \"spotify:user:your_user_id\"\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.user_get_profile-Tuple{Any}","page":"Endpoints","title":"Spotify.user_get_profile","text":"user_get_profile(user_id::String)\n\nSummary: Get public profile information about a Spotify user.\n\nArguments\n\nuser_id::String : Alphanumeric ID of the user or name (e.g. \"smedjan\") \n\nExample\n\njulia> Spotify.user_get_profile(\"smedjan\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 8 entries:\n  :display_name  => \"smedjan\"\n  :external_urls => {…\n  :followers     => {…\n  :href          => \"https://api.spotify.com/v1/users/smedjan\"\n  :id            => \"smedjan\"\n  :images        => Union{}[]\n  :type          => \"user\"\n  :uri           => \"spotify:user:smedjan\"\n\n\n\n\n\n","category":"method"},{"location":"examples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples.html#Listing-your-saved-tracks","page":"Examples","title":"Listing your saved tracks","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"First things first ensure you have all the required components","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using Spotify\nusing Spotify.Library\nUsing Spotify","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Once you are authenticated you can run ","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"offset = 0\nst, repeat_after_sec = library_get_saved_tracks(1, offset, \"NO\")\n@info \"Listing $(st.total) tracks. Pauses may occur due the the current API rate limit.\"\n\nrepeat_after_sec = 0\nwhile true\n    while true\n        repeat_after_sec !=0 && sleep(repeat_after_sec + 0.5)\n        st, repeat_after_sec = library_get_saved_tracks(50, offset, \"NO\")\n        repeat_after_sec == 0 && break\n    end\n    for (i, t) in enumerate(st.items)\n        println(lpad(i + offset, 5), t.track.name)\n    end\n    offset += length(st.items)\n    offset >= st.total && break\nend","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"which may take some time depending on your library size","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"tip: For faster results\nWe recommend just getting the default number (20) of tracks from your library using library_get_saved_tracks()","category":"page"},{"location":"examples.html#Extracting-and-Saving-all-your-*Liked*-songs","page":"Examples","title":"Extracting & Saving all your Liked songs","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Based on indexing using the library_get_saved_tracks() function you could potentially create a CSV of all the tracks you've liked.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Here's one example of how you might do this","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using Spotify\nusing Spotify.Library\nusing Spotify.Tracks\nusing DataFrames\n\n\n## Get tracks loop\n\nfunction define_df()\n    @info Defining the dataframe\n    temp = library_get_saved_tracks(1)[1][\"items\"][1]\n    global tracks_df = DataFrame(;Dict(temp[\"track\"])...)\n    tracks_df[\"added_at\"] = temp[\"added_at\"]\n    delete!(tracks_df,1)\nend\n\ndefine_df()\n##\n\n@warn \"Attempting to retrieve the last 2,000 songs from Spotify \\n This may take some time\"\nfor batch = 0:20:2000\n    println(\"Getting batch: \", batch/20)\n    temp = library_get_saved_tracks(20,(batch+1))[1][\"items\"]\n\n    for i in 1:20\n        temp2 = DataFrame(;Dict(temp[i][\"track\"])...)\n        temp2[\"added_at\"] = temp[i][\"added_at\"]\n        println(\"Adding Track: \", temp[i][\"track\"][\"name\"])\n        append!(tracks_df, temp2, cols=:union)\n\n    end\n\n    #sleep(rand(1:11))\nend\n\n##\nsize(tracks_df)\n\nunique!(tracks_df, \"id\")\n\n##\nusing CSV\nsomething.(tracks_df, missing) |> CSV.write(\"track_data.csv\")","category":"page"},{"location":"authentication.html#First-Steps","page":"First Steps","title":"First Steps","text":"","category":"section"},{"location":"authentication.html#Obtaining-API-Keys","page":"First Steps","title":"Obtaining API Keys","text":"","category":"section"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"Visit the Spotify developer website and login/register.","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"Once registered visit your dashboard and \"Create an App\". Call it whatever you want!","category":"page"},{"location":"authentication.html#Redirect-URI","page":"First Steps","title":"Redirect URI","text":"","category":"section"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"Open the app and edit the settings. In the field where it asks for Redirect URI enter http://127.0.0.1:8080.","category":"page"},{"location":"authentication.html#Setting-credentials","page":"First Steps","title":"Setting credentials","text":"","category":"section"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"When you first run","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"using Spotify","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"Spotify.jl will create an .ini file in your home directory. This is where you will insert your Client ID, Client Secret, and your Spotify username.","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"warning: Sensitive Information\nDo not share you credentials with anyone. The .ini file is placed in your homedir as means to seperate your credentials from being shared along with your code!","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"   [User procedure:]\n  1 1: How to get the CLIENT_ID=Developer.spotify.com -> Dashboard -> log in -> \n  2 2: How to get CLIENT_SECRET=When you have client id, press 'Show client secr\n  3 3: How to give REDIRECT_URL=Still in the app dashboard:\n  4     'Edit settings' -> Redirect uris -> http://127.0.0.1:8080 -> Save change\n  5 [Spotify developer's credentials]\n  6 CLIENT_ID=YOUR_CLIENT_ID\n  7 REDIRECT_URI=http://127.0.0.1:8080\n  8 CLIENT_SECRET=YOUR_CLIENT_SECRET\n  9 [Spotify user id]\n 10 user_name=YOUR_USERNAME\n ```\n\n Now you are ready to try running a command. For example getting 20 of your saved tracks\n ```\n Spotify.Library.library_get_saved_tracks()\n[ Info: Starting asyncronous user authorization process. Try again later!\n\tListening for authorization on 127.0.0.1:8080 and path \n\tLaunching a browser at: https://accounts.spotify.com/authorize?client_id=86e72e3fb91149d395088fdd0234f44d&redirect_uri=http:%2F%2F127.0.0.1:8080&scope=user-read-private%20user-read-email%20user-follow-read%20user-library-read&show_dialog=true&response_type=token&state=987\n\tTrying to launch browser candidate: firefox\n[ Info: Waiting for 15 seconds","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"tip: Browser not opening?\nIf a browser does not open asking you to allow your API to access you account data, then simply run the command again and visit the link that is output by the REPL","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"Once the website opens and you allow the API to query your data you will be redirected to the http://127.0.0.1:8080 page. You can close the window and query. Credentials typically last about an hour before needing to be refreshed.","category":"page"},{"location":"reference/api.html#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/api.html","page":"Reference","title":"Reference","text":"Modules = [Spotify]\nOrder   = [:macro, :function, :type, :constant, ]","category":"page"},{"location":"reference/api.html#Spotify.@_ie-Tuple","page":"Reference","title":"Spotify.@_ie","text":"import export shorthand\n\n\n\n\n\n","category":"macro"},{"location":"reference/api.html#Spotify._get_ini_fnam-Tuple{}","page":"Reference","title":"Spotify._get_ini_fnam","text":"Get an existing, readable ini file name, create it if necessary\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.authorize-Tuple{}","page":"Reference","title":"Spotify.authorize","text":"authorize()\n\nGet and store client credentials. Any other credentials will be dropped.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.get_id_secret_redirect-Tuple{}","page":"Reference","title":"Spotify.get_id_secret_redirect","text":"Get id and secret as 32-byte string, no encryption\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.get_implicit_grant-Tuple{}","page":"Reference","title":"Spotify.get_implicit_grant","text":"If the user gives us access, that will be in the future. Is it worth waiting for? If so, call wait_for_ig_access()\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.player_get_current_track-Tuple{}","page":"Reference","title":"Spotify.player_get_current_track","text":"player_get_current_track(;additional_types::String=\"track\", market::String=\"US\")\n\nSummary: Get the object currently being played on the user's Spotify account.\n\nOptional keywords\n\nadditional_types::String : \"track\" (default) or \"episode\"\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                     only episodes that are available in that market will be returned.                     Default is set to \"US\".\n\nExample\n\njulia> Spotify.player_get_current_track()[1]\n[ Info: We try the request without checking if current grant includes scope user-read-playback-state.\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :timestamp              => 1636491068506\n  :context                => {…\n  :progress_ms            => 5265\n  :item                   => {…\n  :currently_playing_type => \"track\"\n  :actions                => {…\n  :is_playing             => true\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.player_get_devices-Tuple{}","page":"Reference","title":"Spotify.player_get_devices","text":"player_get_devices()\n\nSummary: Get information about a user’s available devices.\n\nExample\n\njulia> Spotify.player_get_devices()[1][\"devices\"]\n2-element JSON3.Array{JSON3.Object, Base.CodeUnits{UInt8, String}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}}:\n{\n                   \"id\": \"your_device_id\",\n            \"is_active\": false,\n   \"is_private_session\": false,\n        \"is_restricted\": false,\n                 \"name\": \"Web Player (Chrome)\",\n                 \"type\": \"Computer\",\n       \"volume_percent\": 100\n}\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.player_get_state-Tuple{}","page":"Reference","title":"Spotify.player_get_state","text":"player_get_state(;additional_types::String=\"track\", market::String=\"US\")\n\nSummary: Get information about the user’s current playback state, including track or episode,               progress, and active device.\n\nOptional keywords\n\nadditional_types::String : \"track\" (default) or \"episode\"\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                     only episodes that are available in that market will be returned.                     Default is set to \"US\".\n\nExample\n\njulia> Spotify.player_get_state()[1]\n[ Info: We try the request without checking if current grant includes scope user-read-playback-state.\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 10 entries:\n  :device                 => {…\n  :shuffle_state          => false\n  :repeat_state           => \"off\"\n  :timestamp              => 1636493367689\n  :context                => {…\n  :progress_ms            => 66454\n  :item                   => {…\n  :currently_playing_type => \"track\"\n  :actions                => {…\n  :is_playing             => true\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.recommendations_get-Tuple{Any}","page":"Reference","title":"Spotify.recommendations_get","text":"recommendations_get(seeds; track_attributes, limit::Int64 = 50, market::String = \"US\")\n\nSummary: Get Recommendations Based on Seeds\n\nArguments\n\nseeds : A dictionary containing keys(seedgenres, seedartists, seedtracks) and values for each key being seeds         delimited by a comma up to 5 seeds for each category. For example:        Dict(\"seedartists\" => \"s33dart1st,s33edart!st2\", \"seedgenres\" => \"g3nre1,genr32\", \"seedtracks\" => \"trackid1,trackid2\")\n\nOptional keywords\n\ntrack_attributes : A dictionary containing key values for different tunable track track_attributes\nlimit::Int64 : Maximum number of items to return, default is set to 20\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                     only episodes that are available in that market will be returned.                     Default is set to \"US\".\n\nReference\n\n(https://developer.spotify.com/documentation/web-api/reference/#/operations/get-recommendations)\n\nExample\n\njulia> seeds = Dict(\"seed_artists\" => \"0YC192cP3KPCRWx8zr8MfZ\")\nDict{String, String} with 1 entry:\n  \"seed_artists\" => \"0YC192cP3KPCRWx8zr8MfZ\"\n\njulia> track_attributes = Dict(\"max_danceability\" => \"0.80\")\nDict{String, String} with 1 entry:\n  \"max_danceability\" => \"0.80\"\n\njulia> Spotify.recommendations_get(seeds, track_attributes = track_attributes)[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 2 entries:\n  :tracks => JSON3.Object[{…\n  :seeds  => JSON3.Object[{…\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.spotify_request","page":"Reference","title":"Spotify.spotify_request","text":"spotify_request(url_ext::String, method::String= \"GET\"; scope = \"client-credentials\")\n -> (r::JSON3.Object, retry_in_seconds::Int)\n\nAccess the Spotify Web API. Error results return an empty Object.  Errors are written to 'stderr', expect for 'API rate limit exceeded', as  the output would typically occur in the middle of recursive calls.\n\n\n\n\n\n","category":"function"},{"location":"reference/api.html#Spotify.strip_embed_code-Tuple{Any}","page":"Reference","title":"Spotify.strip_embed_code","text":"strip_embed_code(sdvs<substring>)\n-> Spid(<substring>)\n\nGet the interesting part for pasting:\n\nSpotify app -> Right click -> Share -> Copy embed code to clipboard\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.SpAlbumId","page":"Reference","title":"Spotify.SpAlbumId","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpArtistId","page":"Reference","title":"Spotify.SpArtistId","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpCategoryId","page":"Reference","title":"Spotify.SpCategoryId","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpEpisodeId","page":"Reference","title":"Spotify.SpEpisodeId","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpId","page":"Reference","title":"Spotify.SpId","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpPlaylistId","page":"Reference","title":"Spotify.SpPlaylistId","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpShowId","page":"Reference","title":"Spotify.SpShowId","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpUri","page":"Reference","title":"Spotify.SpUri","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpUrl","page":"Reference","title":"Spotify.SpUrl","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpUserId","page":"Reference","title":"Spotify.SpUserId","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.AUTH_URL","page":"Reference","title":"Spotify.AUTH_URL","text":"For the client credentials flow\n\n\n\n\n\n","category":"constant"},{"location":"reference/api.html#Spotify.BROWSERS","page":"Reference","title":"Spotify.BROWSERS","text":"A list of potentially available browsers, to be tried in succession if present\n\n\n\n\n\n","category":"constant"},{"location":"reference/api.html#Spotify.DEFAULT_IMPLICIT_GRANT","page":"Reference","title":"Spotify.DEFAULT_IMPLICIT_GRANT","text":"These permissions are not requested until the current scope is insufficient, or the user calls 'getimplicitgrant()'\n\nDefault requested permissions are 'client-credentials'.\n\n\n\n\n\n","category":"constant"},{"location":"reference/api.html#Spotify.OAUTH_AUTHORIZE_URL","page":"Reference","title":"Spotify.OAUTH_AUTHORIZE_URL","text":"For the 'Implicit grant flow\n\n\n\n\n\n","category":"constant"},{"location":"reference/functionindex.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"reference/functionindex.html","page":"Index","title":"Index","text":"","category":"page"},{"location":"index.html#Spotify.jl","page":"Spotify.jl","title":"Spotify.jl","text":"","category":"section"},{"location":"index.html#A-simple-Spotify-API-Wrapper-in-Julia","page":"Spotify.jl","title":"A simple Spotify API Wrapper in Julia","text":"","category":"section"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"warning: In Progress\nThis package and the accompanying documentation is still under development","category":"page"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"Spofity.jl aims to create a simple interface with the Spotify API to provide Julia users with Spotify data.","category":"page"},{"location":"index.html#Use-Cases","page":"Spotify.jl","title":"Use Cases","text":"","category":"section"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"Create your own recommendation algorithm\nDashboards for music listening habits\nAnalyze audio features for music you enjoy\nAutomatically create playlists\nCreate applications to augment your music experience","category":"page"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"We are excited to complete the project and see what people can create using `Spotify.jl'","category":"page"},{"location":"index.html#In-progress","page":"Spotify.jl","title":"In progress","text":"","category":"section"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"Right now, 40 API functions have been written, roughly tested and organized by sub-modules as defined in Spotify's documentation:","category":"page"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"Albums, Artists, Browse, Episodes, Follow, Library Markets, Personalization, Player, Playlists, Search Shows, Tracks, UsersProfile, (Objects) Help wanted in adding the still-missing functions!","category":"page"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"Ouput from function calls is JSON3 objects, which can be readily manipulated in the REPL or in other packages.","category":"page"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"Input to all functions is basically strings, but some ad-hoc string types are defined. These provide potential input checking, and some assistance in finding dummy parameters. Dummy parameters are defined in the 'test' folder, but more accessible through the menu system, see below.","category":"page"}]
}
